#!/bin/bash
if [ -e $1 ]; then 
    echo  "Project folder $1 already exists"
    exit 1
fi
#TODO: add option to install mongoose dependencies and starter code
mkdir ./$1
cd ./$1

touch .gitignore 
echo ".DS_Store
node_modules" >> ./.gitignore

touch ./package.json
echo "{
  \"name\": \"$1\",
  \"version\": \"0.0.0\",
  \"private\": true,
  \"scripts\": {
    \"start\": \"node ./bin/www\"
  },
  \"dependencies\": {
  }
}" >> ./package.json
npm i -S express body-parser bcrypt 

touch app.js
echo "const path = require('path');
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const indexRouter = require('./controllers/index');
const userRouter = require('./controllers/users')

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, './public/')));

app.use('/', indexRouter);
app.use('/users', userRouter);

module.exports = app;" >> app.js

if [ -z "$2" ]; then 
    $2=3000
fi
mkdir ./bin
touch ./bin/www
echo "const http = require('http');
const app = require('./../app.js');
const port = $2;

let server = http.createServer(app);
server.listen(port);
server.on('listening', () => console.log('listening on port ' + port))" >> ./bin/www

mkdir ./public
mkdir ./public/images
mkdir ./public/scripts
mkdir ./public/styles
touch ./public/styles/style.css
touch ./public/index.html
echo "<!DOCTYPE html>
<html>
<head>
    <title>$1</title>
    <link rel='stylesheet' type='text/css' href='styles/style.css'>
</head>
<body>
    <h1>Hello World</h1>
</body
</html>" >> ./public/index.html
echo "h1 {
        color: red;
    }" >> ./public/styles/style.css

mkdir ./controllers
touch ./controllers/index.js
echo "const path = require('path');
const express = require('express');
const router = express.Router();

router.get('/', (req, res, next) {
        res.render('index', { title: 'Express' });
});
router.all(\"*\", (req, res, next) => {
        res.sendFile(path.resolve(\"./public/index.html\"));
}); 

module.exports = router;
" >> ./controllers/index.js

touch ./controllers/users.js
echo "const express = require('express');
const router = express.Router();

router.get('/', (req, res) => { 
        res.redirect();
    });
router.post('/', (req, res) => { 
        res.json({foo: blegh}) 
    });

module.exports = router;
" >> ./controllers/users.js

mkdir ./models
touch ./models/user.js
echo "const db = require('mydatabase');
const bcrypt = require('bcrypt');

exports.create = function(name, email, password, cb) {
    let user = {
        name: name,
        email: email,
        password: bcrypt.hash(password, 10),
    }

    db.save(user, cb);
}
exports.authenticate = function(email, password) {
    db.fetch({email: email}), (err, docs) {
        if (err) {
            cb(err);
        }
        if (docs.length === 0) {
            cb();
        }

        let user = docs[0];
        if (bcrypt.compareSync(password, user.password)) {
            cb(null, user);
        }
    }
}

exports.get = function(username, cb) {
    db.fetch({username : username}, function(err, data) {
        if (err) {
            //handling
            cb(err);
        }
        cb(err, data);
    }
}

exports.getAll = function(cb) {
    db.fetch({}, cb);
}" >> user.js

mkdir ./middleware
mkdir ./middleware/users.js
echo " const User = require('../models/user');

let loadUserMakingRequest = function(req, res, next) => {
    if (req.session && req.session.user) {
        User.get(req.session.user, (err, user) {
            if (user) {
                req.user = user;
            } else {
                delete req.session.user;
                delete req.user;
            }
        }
    }
    next();
}

module.exports = loadUserMakingRequest;

/* module.exports = function(req, res, next) {
  if (req.user) {
    next()
  } else {
    res.status(401).end()
  }
} */
" >> ./middleware/user.js

